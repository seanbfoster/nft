{"ast":null,"code":"var _jsxFileName = \"/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/Minter.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWallet, mintNFT } from \"./util/dapp.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = props => {\n  _s();\n\n  const [status, setStatus] = useState(\"\");\n  const [walletAddress, setWallet] = useState(\"\");\n  var [mintNum, setMintNum] = useState(1);\n  useEffect(async () => {\n    const {\n      status,\n      address\n    } = await getCurrentWallet();\n    setStatus(status);\n    setWallet(address);\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"Wallet Connected\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"Connect using Metamask\");\n        }\n      });\n    } else {\n      setStatus(\"Install Metamask\");\n    }\n  }\n\n  function changeNumTokens(n) {\n    setMintNum(mintNum + n);\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async numTokens => {\n    const mintRepsonse = await mintNFT(numTokens); // setStatus(status);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minter\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"addNumToken\",\n      onClick: () => changeNumTokens(1),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"minusNumToken\",\n      onClick: () => changeNumTokens(-1),\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"numberOfTokens\",\n      children: mintNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"mintButton\",\n      onClick: () => onMintPressed(mintNum),\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minter, \"q00gtBHrkcYx/WfMYA/1ygWfJXI=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWallet","mintNFT","Minter","props","status","setStatus","walletAddress","setWallet","mintNum","setMintNum","address","addWalletListener","window","ethereum","on","accounts","length","changeNumTokens","n","connectWalletPressed","walletResponse","onMintPressed","numTokens","mintRepsonse","String","substring"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWallet,\n  mintNFT\n} from \"./util/dapp.js\";\n\nconst Minter = (props) => {\n  const [status, setStatus] = useState(\"\");\n  const [walletAddress, setWallet] = useState(\"\");\n  var [mintNum, setMintNum] = useState(1);\n\n  useEffect(async () => {\n    const { status, address } = await getCurrentWallet();\n    setStatus(status);\n    setWallet(address);\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"Wallet Connected\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"Connect using Metamask\");\n        }\n      });\n    } else {\n      setStatus(\"Install Metamask\");\n    }\n  }\n\n  function changeNumTokens(n) {\n    setMintNum(mintNum + n)\n  }\n\n\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async (numTokens) => {\n    const mintRepsonse = await mintNFT(numTokens);\n    // setStatus(status);\n  };\n\n\n\n  return (\n    <div className=\"Minter\">\n\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n          ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n      \n      <button id=\"addNumToken\" onClick = {() => changeNumTokens(1)}>\n        +\n      </button>\n\n      <button id=\"minusNumToken\" onClick = {() => changeNumTokens(-1)}>\n        -\n      </button>\n      \n      <h1 id=\"numberOfTokens\">\n        {mintNum}\n      </h1>\n\n      <button id=\"mintButton\" onClick = {() => onMintPressed(mintNum)}>\n        Mint NFT\n      </button>\n      \n    </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}