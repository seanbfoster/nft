{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./util/interact.js\";\n\nconst Minter = props => {\n  _s();\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  useEffect(async () => {\n    const {\n      address,\n      status\n    } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"Wallet Connected\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"Connect using Metamask\");\n        }\n      });\n    } else {\n      setStatus(\"Install Metamask\");\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  }; // const onMintPressed = async () => {\n  //   const { success, status } = await mintNFT(1);\n  //   setStatus(status);\n  // };\n  // return (\n  //   <div className=\"Minter\">\n  //     <button id=\"walletButton\" onClick={connectWalletPressed}>\n  //       {walletAddress.length > 0 ? (\n  //         \"Connected: \" +\n  //         String(walletAddress).substring(0, 6) +\n  //         \"...\" +\n  //         String(walletAddress).substring(38)\n  //         ) : (\n  //         <span>Connect Wallet</span>\n  //       )}\n  //     </button>\n  //     <button id=\"mintButton\" onClick={onMintPressed}>\n  //       Mint NFT\n  //     </button>\n  //   </div>\n  // );\n\n};\n\n_s(Minter, \"q0p8+3FZYTBUtuRVbPHlOrYpKHk=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","mintNFT","Minter","props","walletAddress","setWallet","status","setStatus","address","addWalletListener","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SACEC,aADF,EAEEC,yBAFF,EAGEC,OAHF,QAIO,oBAJP;;AAMA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,aAAD,EAAgBC,SAAhB,IAA6BP,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAM;AAAEW,MAAAA,OAAF;AAAWF,MAAAA;AAAX,QAAsB,MAAMN,yBAAyB,EAA3D;AACAK,IAAAA,SAAS,CAACG,OAAD,CAAT;AACAD,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,IAAAA,iBAAiB;AAClB,GALQ,EAKN,EALM,CAAT;;AAOA,WAASA,iBAAT,GAA6B;AAC3B,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAuCC,QAAD,IAAc;AAClD,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBT,UAAAA,SAAS,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAT;AACAN,UAAAA,SAAS,CAAC,kBAAD,CAAT;AACD,SAHD,MAGO;AACLF,UAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,UAAAA,SAAS,CAAC,wBAAD,CAAT;AACD;AACF,OARD;AASD,KAVD,MAUO;AACLA,MAAAA,SAAS,CAAC,kBAAD,CAAT;AACD;AACF;;AAED,QAAMQ,oBAAoB,GAAG,YAAY;AACvC,UAAMC,cAAc,GAAG,MAAMjB,aAAa,EAA1C;AACAQ,IAAAA,SAAS,CAACS,cAAc,CAACV,MAAhB,CAAT;AACAD,IAAAA,SAAS,CAACW,cAAc,CAACR,OAAhB,CAAT;AACD,GAJD,CA3BwB,CAiCxB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACD,CAzDD;;GAAMN,M;;KAAAA,M;AA2DN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./util/interact.js\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"Wallet Connected\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"Connect using Metamask\");\n        }\n      });\n    } else {\n      setStatus(\"Install Metamask\");\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  // const onMintPressed = async () => {\n  //   const { success, status } = await mintNFT(1);\n  //   setStatus(status);\n  // };\n\n  // return (\n  //   <div className=\"Minter\">\n  //     <button id=\"walletButton\" onClick={connectWalletPressed}>\n  //       {walletAddress.length > 0 ? (\n  //         \"Connected: \" +\n  //         String(walletAddress).substring(0, 6) +\n  //         \"...\" +\n  //         String(walletAddress).substring(38)\n  //         ) : (\n  //         <span>Connect Wallet</span>\n  //       )}\n  //     </button>\n      \n  //     <button id=\"mintButton\" onClick={onMintPressed}>\n  //       Mint NFT\n  //     </button>\n      \n  //   </div>\n  // );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}