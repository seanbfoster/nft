{"ast":null,"code":"import Web3 from \"web3\";\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0xC73B2C2A555F845796A42c69B5b6Bc21394929A1\";\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      return {\n        status: \"wallet connected\",\n        address: addressArray[0]\n      };\n    } catch (err) {\n      return {\n        status: err.message,\n        address: \"\"\n      };\n    }\n  } else {\n    return {\n      status: \"Wallet not detected\",\n      address: \"\"\n    };\n  }\n};\nexport const getCurrentWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          status: \"wallet connected\",\n          address: addressArray[0]\n        };\n      } else {\n        return {\n          status: \"please connect your wallet\",\n          address: \"\"\n        };\n      }\n    } catch (err) {\n      return {\n        status: err.message,\n        address: \"\"\n      };\n    }\n  } else {\n    return {\n      status: \"\",\n      wallet: \"Wallet not detected\"\n    };\n  }\n};\nexport const mintNFT = async numTokens => {\n  var web3 = new Web3(Web3.givenProvider);\n  var contract = new web3.eth.Contract(contractABI, contractAddress);\n  alert(window.ethereum.selectedAddress);\n  const transactionParameters = {\n    to: contractAddress,\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    value: Web3.utils.toHex(mintPrice * quantity),\n    'data': window.contract.methods.mintTeslaBot(1).encodeABI() //make call to NFT smart contract \n\n  };\n};","map":{"version":3,"sources":["/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/util/dapp.js"],"names":["Web3","contractABI","require","contractAddress","connectWallet","window","ethereum","addressArray","request","method","status","address","err","message","getCurrentWallet","length","wallet","mintNFT","numTokens","web3","givenProvider","contract","eth","Contract","alert","selectedAddress","transactionParameters","to","from","value","utils","toHex","mintPrice","quantity","methods","mintTeslaBot","encodeABI"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMC,eAAe,GAAG,4CAAxB;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAY;AAErC,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACjB,QAAI;AACA,YAAMC,YAAY,GAAG,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAxB,CAA3B;AAEA,aAAO;AACHC,QAAAA,MAAM,EAAE,kBADL;AAEHC,QAAAA,OAAO,EAAEJ,YAAY,CAAC,CAAD;AAFlB,OAAP;AAIH,KAPD,CAQA,OAAOK,GAAP,EAAY;AACR,aAAO;AACHF,QAAAA,MAAM,EAAEE,GAAG,CAACC,OADT;AAEHF,QAAAA,OAAO,EAAE;AAFN,OAAP;AAIH;AACJ,GAfD,MAiBK;AACD,WAAO;AACHD,MAAAA,MAAM,EAAE,qBADL;AAEHC,MAAAA,OAAO,EAAE;AAFN,KAAP;AAIH;AACJ,CAzBM;AA2BP,OAAO,MAAMG,gBAAgB,GAAG,YAAY;AACxC,MAAGT,MAAM,CAACC,QAAV,EAAmB;AACf,QAAI;AACA,YAAMC,YAAY,GAAG,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAxB,CAA3B;;AAEA,UAAGF,YAAY,CAACQ,MAAb,GAAsB,CAAzB,EAA4B;AACxB,eAAO;AACHL,UAAAA,MAAM,EAAE,kBADL;AAEHC,UAAAA,OAAO,EAAEJ,YAAY,CAAC,CAAD;AAFlB,SAAP;AAIH,OALD,MAOK;AACD,eAAO;AACHG,UAAAA,MAAM,EAAE,4BADL;AAEHC,UAAAA,OAAO,EAAE;AAFN,SAAP;AAIH;AACJ,KAhBD,CAkBA,OAAOC,GAAP,EAAW;AACP,aAAO;AACHF,QAAAA,MAAM,EAAEE,GAAG,CAACC,OADT;AAEHF,QAAAA,OAAO,EAAE;AAFN,OAAP;AAIH;AACJ,GAzBD,MA0BI;AACA,WAAO;AACHD,MAAAA,MAAM,EAAE,EADL;AAEHM,MAAAA,MAAM,EAAE;AAFL,KAAP;AAIH;AACJ,CAjCM;AAmCP,OAAO,MAAMC,OAAO,GAAG,MAAOC,SAAP,IAAqB;AACxC,MAAIC,IAAI,GAAG,IAAInB,IAAJ,CAASA,IAAI,CAACoB,aAAd,CAAX;AAEA,MAAIC,QAAQ,GAAG,IAAIF,IAAI,CAACG,GAAL,CAASC,QAAb,CAAsBtB,WAAtB,EAAmCE,eAAnC,CAAf;AAEAqB,EAAAA,KAAK,CAACnB,MAAM,CAACC,QAAP,CAAgBmB,eAAjB,CAAL;AACA,QAAMC,qBAAqB,GAAG;AACxBC,IAAAA,EAAE,EAAExB,eADoB;AAExByB,IAAAA,IAAI,EAAEvB,MAAM,CAACC,QAAP,CAAgBmB,eAFE;AAEe;AACvCI,IAAAA,KAAK,EAAE7B,IAAI,CAAC8B,KAAL,CAAWC,KAAX,CAAiBC,SAAS,GAAGC,QAA7B,CAHiB;AAIxB,YAAQ5B,MAAM,CAACgB,QAAP,CAAgBa,OAAhB,CAAwBC,YAAxB,CAAqC,CAArC,EAAwCC,SAAxC,EAJgB,CAIoC;;AAJpC,GAA9B;AAOH,CAbM","sourcesContent":["import Web3 from \"web3\";\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xC73B2C2A555F845796A42c69B5b6Bc21394929A1\";\n\nexport const connectWallet = async () => {\n    \n    if (window.ethereum) {\n        try {\n            const addressArray = await window.ethereum.request({method: 'eth_requestAccounts'});\n\n            return {\n                status: \"wallet connected\",\n                address: addressArray[0]\n            }\n        }\n        catch (err) {\n            return {\n                status: err.message,\n                address: \"\"\n            }\n        }\n    }\n\n    else {\n        return {\n            status: \"Wallet not detected\",\n            address: \"\"\n        }\n    }\n}\n\nexport const getCurrentWallet = async () => {\n    if(window.ethereum){\n        try {\n            const addressArray = await window.ethereum.request({method: 'eth_accounts'});\n            \n            if(addressArray.length > 0) {\n                return {\n                    status: \"wallet connected\",\n                    address: addressArray[0]\n                }\n            }\n\n            else {\n                return {\n                    status: \"please connect your wallet\",\n                    address: \"\"\n                }\n            }\n        }\n\n        catch (err){\n            return {\n                status: err.message,\n                address: \"\"\n            }\n        }\n    }\n    else{\n        return {\n            status: \"\",\n            wallet: \"Wallet not detected\"\n        }\n    }\n}\n\nexport const mintNFT = async (numTokens) => {\n    var web3 = new Web3(Web3.givenProvider)\n\n    var contract = new web3.eth.Contract(contractABI, contractAddress)\n\n    alert(window.ethereum.selectedAddress)\n    const transactionParameters = {\n          to: contractAddress,\n          from: window.ethereum.selectedAddress, // must match user's active address.\n          value: Web3.utils.toHex(mintPrice * quantity),\n          'data': window.contract.methods.mintTeslaBot(1).encodeABI() //make call to NFT smart contract \n    }\n    \n}"]},"metadata":{},"sourceType":"module"}