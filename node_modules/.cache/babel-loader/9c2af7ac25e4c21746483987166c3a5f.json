{"ast":null,"code":"var _jsxFileName = \"/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/Components/Minter.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWallet, mintNFT } from \"../util/dapp.js\";\nimport hero from \"../util/hero.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = props => {\n  _s();\n\n  const [status, setStatus] = useState(\"\");\n  const [walletAddress, setWallet] = useState(\"\");\n  const [mintNum, setMintNum] = useState(1);\n  useEffect(async () => {\n    const {\n      status,\n      address\n    } = await getCurrentWallet();\n    setStatus(status);\n    setWallet(address);\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"Wallet Connected\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"Connect using Metamask\");\n        }\n      });\n    } else {\n      setStatus(\"Install Metamask\");\n    }\n  }\n\n  function changeNumTokens(n) {\n    if (mintNum + n >= 1 && mintNum + n <= 10) {\n      setMintNum(mintNum + n);\n    }\n  }\n\n  const onMintPressed = async numTokens => {\n    const mintRepsonse = await mintNFT(numTokens); // setStatus(status);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minter\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"minthero\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: hero,\n        alt: \"hero image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mint\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"numberOfTokens\",\n        children: mintNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"addNumToken\",\n        onClick: () => changeNumTokens(1),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"minusNumToken\",\n        onClick: () => changeNumTokens(-1),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"mintButton\",\n        onClick: () => onMintPressed(mintNum),\n        children: \"Mint NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Minter, \"q00gtBHrkcYx/WfMYA/1ygWfJXI=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/Components/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWallet","mintNFT","hero","Minter","props","status","setStatus","walletAddress","setWallet","mintNum","setMintNum","address","addWalletListener","window","ethereum","on","accounts","length","changeNumTokens","n","onMintPressed","numTokens","mintRepsonse"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,OAHF,QAIO,iBAJP;AAMA,OAAOC,IAAP,MAAiB,kBAAjB;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,aAAD,EAAgBC,SAAhB,IAA6BV,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAM;AAAEQ,MAAAA,MAAF;AAAUM,MAAAA;AAAV,QAAsB,MAAMX,gBAAgB,EAAlD;AACAM,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,IAAAA,SAAS,CAACG,OAAD,CAAT;AACAC,IAAAA,iBAAiB;AAClB,GALQ,EAKN,EALM,CAAT;;AAOA,WAASA,iBAAT,GAA6B;AAC3B,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAuCC,QAAD,IAAc;AAClD,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBT,UAAAA,SAAS,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAT;AACAV,UAAAA,SAAS,CAAC,kBAAD,CAAT;AACD,SAHD,MAGO;AACLE,UAAAA,SAAS,CAAC,EAAD,CAAT;AACAF,UAAAA,SAAS,CAAC,wBAAD,CAAT;AACD;AACF,OARD;AASD,KAVD,MAUO;AACLA,MAAAA,SAAS,CAAC,kBAAD,CAAT;AACD;AACF;;AAED,WAASY,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B,QAAIV,OAAO,GAAGU,CAAV,IAAe,CAAhB,IAAuBV,OAAO,GAAGU,CAAV,IAAe,EAAzC,EAA6C;AAC3CT,MAAAA,UAAU,CAACD,OAAO,GAAGU,CAAX,CAAV;AACD;AACF;;AAED,QAAMC,aAAa,GAAG,MAAOC,SAAP,IAAqB;AACzC,UAAMC,YAAY,GAAG,MAAMrB,OAAO,CAACoB,SAAD,CAAlC,CADyC,CAEzC;AACD,GAHD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEnB,IAAV;AAAgB,QAAA,GAAG,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACA;AAAI,QAAA,EAAE,EAAC,gBAAP;AAAA,kBACKO;AADL;AAAA;AAAA;AAAA;AAAA,cADA,eAIE;AAAQ,QAAA,EAAE,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAI,MAAMS,eAAe,CAAC,CAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAQ,QAAA,EAAE,EAAC,eAAX;AAA2B,QAAA,OAAO,EAAI,MAAMA,eAAe,CAAC,CAAC,CAAF,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAUE;AAAQ,QAAA,EAAE,EAAC,YAAX;AAAwB,QAAA,OAAO,EAAI,MAAME,aAAa,CAACX,OAAD,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBD,CA9DD;;GAAMN,M;;KAAAA,M;AAgEN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWallet,\n  mintNFT\n} from \"../util/dapp.js\";\n\nimport hero from \"../util/hero.jpg\"\n\nconst Minter = (props) => {\n  const [status, setStatus] = useState(\"\");\n  const [walletAddress, setWallet] = useState(\"\");\n  const [mintNum, setMintNum] = useState(1);\n\n  useEffect(async () => {\n    const { status, address } = await getCurrentWallet();\n    setStatus(status);\n    setWallet(address);\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"Wallet Connected\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"Connect using Metamask\");\n        }\n      });\n    } else {\n      setStatus(\"Install Metamask\");\n    }\n  }\n\n  function changeNumTokens(n) {\n    if((mintNum + n >= 1) && (mintNum + n <= 10)){\n      setMintNum(mintNum + n)\n    }\n  }\n\n  const onMintPressed = async (numTokens) => {\n    const mintRepsonse = await mintNFT(numTokens);\n    // setStatus(status);\n  };\n\n\n\n  return (\n      <div className=\"Minter\">\n        <div className=\"minthero\">\n          <img src={hero} alt=\"hero image\"/>\n        </div>\n        <div className=\"mint\">\n        <h1 id=\"numberOfTokens\">\n            {mintNum}\n          </h1>\n          <button id=\"addNumToken\" onClick = {() => changeNumTokens(1)}>\n            +\n          </button>\n          <button id=\"minusNumToken\" onClick = {() => changeNumTokens(-1)}>\n            -\n          </button>\n          <button id=\"mintButton\" onClick = {() => onMintPressed(mintNum)}>\n            Mint NFT\n          </button>\n        </div>\n      </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}