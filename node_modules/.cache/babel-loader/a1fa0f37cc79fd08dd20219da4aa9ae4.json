{"ast":null,"code":"var _jsxFileName = \"/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/Minter.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./util/dapp.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = props => {\n  _s();\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\"); // useEffect(async () => {\n  //   const { address, status } = await getCurrentWalletConnected();\n  //   setWallet(address);\n  //   setStatus(status);\n  //   addWalletListener();\n  // }, []);\n  // function addWalletListener() {\n  //   if (window.ethereum) {\n  //     window.ethereum.on(\"accountsChanged\", (accounts) => {\n  //       if (accounts.length > 0) {\n  //         setWallet(accounts[0]);\n  //         setStatus(\"Wallet Connected\");\n  //       } else {\n  //         setWallet(\"\");\n  //         setStatus(\"Connect using Metamask\");\n  //       }\n  //     });\n  //   } else {\n  //     setStatus(\"Install Metamask\");\n  //   }\n  // }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet(); // setStatus(walletResponse.status);\n    // setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const mintRepsonse = await mintNFT(1); // setStatus(status);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minter\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"mintButton\",\n      onClick: onMintPressed,\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minter, \"qDJ1N/JaZ7ODYnXm94fMGQB4RkM=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/Users/seanfoster/Documents/nft-minter-tutorial/nft-minter/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","mintNFT","Minter","props","walletAddress","setWallet","status","setStatus","connectWalletPressed","walletResponse","onMintPressed","mintRepsonse","length","String","substring"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SACEC,aADF,EAEEC,yBAFF,EAGEC,OAHF,QAIO,gBAJP;;;AAMA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,aAAD,EAAgBC,SAAhB,IAA6BP,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC,CAFwB,CAIxB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMU,oBAAoB,GAAG,YAAY;AACvC,UAAMC,cAAc,GAAG,MAAMV,aAAa,EAA1C,CADuC,CAEvC;AACA;AACD,GAJD;;AAMA,QAAMW,aAAa,GAAG,YAAY;AAChC,UAAMC,YAAY,GAAG,MAAMV,OAAO,CAAC,CAAD,CAAlC,CADgC,CAEhC;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAQ,MAAA,EAAE,EAAC,cAAX;AAA0B,MAAA,OAAO,EAAEO,oBAAnC;AAAA,gBACGJ,aAAa,CAACQ,MAAd,GAAuB,CAAvB,GACC,gBACAC,MAAM,CAACT,aAAD,CAAN,CAAsBU,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,CADA,GAEA,KAFA,GAGAD,MAAM,CAACT,aAAD,CAAN,CAAsBU,SAAtB,CAAgC,EAAhC,CAJD,gBAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,OAAO,EAAEJ,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAzDD;;GAAMR,M;;KAAAA,M;AA2DN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./util/dapp.js\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  // useEffect(async () => {\n  //   const { address, status } = await getCurrentWalletConnected();\n  //   setWallet(address);\n  //   setStatus(status);\n  //   addWalletListener();\n  // }, []);\n\n  // function addWalletListener() {\n  //   if (window.ethereum) {\n  //     window.ethereum.on(\"accountsChanged\", (accounts) => {\n  //       if (accounts.length > 0) {\n  //         setWallet(accounts[0]);\n  //         setStatus(\"Wallet Connected\");\n  //       } else {\n  //         setWallet(\"\");\n  //         setStatus(\"Connect using Metamask\");\n  //       }\n  //     });\n  //   } else {\n  //     setStatus(\"Install Metamask\");\n  //   }\n  // }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    // setStatus(walletResponse.status);\n    // setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const mintRepsonse = await mintNFT(1);\n    // setStatus(status);\n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n          ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n      \n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      \n    </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}